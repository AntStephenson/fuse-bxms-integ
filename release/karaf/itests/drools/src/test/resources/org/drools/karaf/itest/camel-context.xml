<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:kie="http://drools.org/schema/kie-spring"
       xsi:schemaLocation="
       http://drools.org/schema/kie-spring http://drools.org/schema/kie-spring.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
">

  <kie:kmodule id="defaultContainer">
    <kie:kbase name="drl_camelsample" packages="drl_camelsample">
      <kie:ksession name="ksession1" type="stateless"/>
    </kie:kbase>
  </kie:kmodule>

  <bean id="kieHelper" class="org.drools.camel.example.DroolsCommandHelper"/>

  <bean id="personHelper" class="org.drools.camel.example.PersonHelper"/>

  <bean id="kie" class="org.kie.camel.component.KieComponent"/>

  <camelContext xmlns="http://camel.apache.org/schema/spring">

    <endpoint id="ruleOnBodyEndpoint" uri="direct-vm://ruleOnBody"/>
    <endpoint id="ruleOnCommandEndpoint" uri="direct-vm://ruleOnCommand"/>

    <route trace="false" id="testRoute">
      <description>Example route that will regularly create a Person with a random age and verify their age
      </description>
      <from uri="timer:testRoute"/>
      <bean method="createTestPerson" ref="personHelper"/>
      <to uri="kie:node1/ksession1?action=insertBody" id="AgeVerification">
        <description>valid 'action' values are:
          'execute' that takes a 'Command' object (default)
          'insertBody' that inserts the Exchange.in.body, and executes rules
          'insertMessage' that inserts the Exchange.in (type org.apache.camel.Message), and executes rules
          'insertExchange' that inserts the Exchange (type org.apache.camel.Exchange), and executes rules
        </description>
      </to>
      <choice>
        <when id="CanDrink">
          <simple>${body.canDrink}</simple>
          <log logName="Bar" message="Person ${body.name} can go to the bar"/>
        </when>
        <otherwise>
          <log logName="Home" message="Person ${body.name} is staying home"/>
        </otherwise>
      </choice>
    </route>

    <route trace="false" id="ruleOnBody">
      <description>This route shows an example of passing (inserting) the Body of the message as a POJO to kie
        for execution
      </description>
      <from ref="ruleOnBodyEndpoint"/>
      <to uri="kie:node1/ksession1?action=insertBody">
        <description>valid 'action' values are:
          'execute' that takes a 'Command' object (default)
          'insertBody' that inserts the Exchange.in.body, and executes rules
          'insertMessage' that inserts the Exchange.in (type org.apache.camel.Message), and executes rules
          'insertExchange' that inserts the Exchange (type org.apache.camel.Exchange), and executes rules
        </description>
      </to>
    </route>

    <route trace="false" id="ruleOnCommand">
      <description>This route shows an example of creating a kie Command wrapping the Body of the message with
        the help of the custom kieCommandHelperBean (included in this project), and passing this kie
        Command to the ruleset for execution.
      </description>
      <from ref="ruleOnCommandEndpoint"/>
      <bean method="insertAndFireAll" ref="kieHelper"/>
      <to uri="kie:node1/ksession1?action=execute">
        <description>valid 'action' values are:
          'execute' that takes a 'Command' object (default)
          'insertBody' that inserts the Exchange.in.body, and executes rules
          'insertMessage' that inserts the Exchange.in (type org.apache.camel.Message), and executes rules
          'insertExchange' that inserts the Exchange (type org.apache.camel.Exchange), and executes rules
        </description>
      </to>
    </route>
  </camelContext>

</beans>
